// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.0;

// inherited contracts
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

// Define a contract 'Supplychain'
contract SupplyChain is AccessControl {
  bytes32 public constant MANUFACTURER_ROLE = keccak256("MANUFACTURER_ROLE");
  bytes32 public constant DISTRIBUTOR_ROLE = keccak256("DISTRIBUTOR_ROLE");
  bytes32 public constant RETAILER_ROLE = keccak256("RETAILER_ROLE");
  bytes32 public constant CONSUMER_ROLE = keccak256("CONSUMER_ROLE");
  // Define 'owner'
  address owner;

  // @dev CPC token contract
  IERC20 private _CPCcontract;
  
  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => Txblocks) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    ProduceByManufacturer,   // 0
    ForSaleByManufacturer,   // 1
    PurchasedByDistributor,  // 2
    ShippedByManufacturer,   // 3
    ReceivedByDistributor,   // 4
    ProcessedByDistributor,  // 5
    PackageByDistributor,    // 6
    ForSaleByDistributor,    // 7
    PurchasedByRetailer,     // 8
    ShippedByDistributor,    // 9
    ReceivedByRetailer,      // 10
    ForSaleByRetailer,       // 11
    PurchasedByConsumer      // 12
    }


  State constant defaultState = State.ProduceByManufacturer;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;                    // Stock Keeping Unit (SKU)
    uint    upc;                    // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Consumer
    address ownerID;                // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originManufacturerID;   // Metamask-Ethereum address of the Manufacturer // ADDED PAYABLE
    bytes32 productID;              // Product Hash ID
    string  productType;            // Product Type identification
    string  productNotes;           // Product Notes
    uint256 productDate;            // Product Date
    uint    productPrice;           // Product Price
    State   itemState;              // Product State as represented in the enum above
    address distributorID;          // Metamask-Ethereum address of the Distributor
    address retailerID;             // Metamask-Ethereum address of the Retailer
    address consumerID;             // Metamask-Ethereum address of the Consumer // ADDED payable
  }

// Block number struct
  struct Txblocks {
    uint FTD; // blockManufacturerToDistributor
    uint DTR; // blockDistributorToRetailer
    uint RTC; // blockRetailerToConsumer
  }

event ProduceByManufacturer(uint indexed upc,address indexed account);   //0
event ForSaleByManufacturer(uint indexed upc,address indexed account);   //1
event PurchasedByDistributor(uint indexed upc,address indexed account);  //2
event ShippedByManufacturer(uint indexed upc,address indexed account);   //3
event ReceivedByDistributor(uint indexed upc,address indexed account);   //4
event ProcessedByDistributor(uint indexed upc,address indexed account);  //5
event PackagedByDistributor(uint indexed upc,address indexed account);   //6
event ForSaleByDistributor(uint indexed upc,address indexed account);    //7
event PurchasedByRetailer(uint indexed upc,address indexed account);     //8
event ShippedByDistributor(uint indexed upc,address indexed account);    //9
event ReceivedByRetailer(uint indexed upc,address indexed account);      //10
event ForSaleByRetailer(uint indexed upc,address indexed account);       //11
event PurchasedByConsumer(uint indexed upc,address indexed account);     //12


  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

// Define a modifier that checks to see if msg.sender has the appropriate role
  modifier onlyManufacturer() {
    require(hasRole(MANUFACTURER_ROLE, msg.sender), "Caller is not a manufacturer");
    _;
  }

modifier onlyDistributor() {
    require(hasRole(DISTRIBUTOR_ROLE, msg.sender), "Caller is not a distributor");
    _;
  }

modifier onlyRetailer() {
    require(hasRole(RETAILER_ROLE, msg.sender), "Caller is not a retailer");
    _;
  }

modifier onlyConsumer() {
    require(hasRole(CONSUMER_ROLE, msg.sender), "Caller is not a consumer");
    _;
  }

modifier onlyAdmin() {
    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Caller is not an admin");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc, address payable addressToFund) {
    uint _price = items[_upc].productPrice;
    uint  amountToReturn = msg.value - _price;
    _CPCcontract.transferFrom(msg.sender,addressToFund,amountToReturn);
    _;
  }

//Item State Modifiers
  modifier producedByManufacturer(uint _upc) {
    require(items[_upc].itemState == State.ProduceByManufacturer);
    _;
  }

  modifier forSaleByManufacturer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByManufacturer);
    _;
  }

  modifier purchasedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByDistributor);
    _;
  }

  modifier shippedByManufacturer(uint _upc) {
    require(items[_upc].itemState == State.ShippedByManufacturer);
    _;
  }

  modifier receivedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByDistributor);
    _;
  }

  modifier processByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ProcessedByDistributor);
    _;
  }

  modifier packagedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.PackageByDistributor);
    _;
  }

  modifier forSaleByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByDistributor);
    _;
  }


  modifier shippedByDistributor(uint _upc) {
    require(items[_upc].itemState == State.ShippedByDistributor);
    _;
  }

  modifier purchasedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByRetailer);
    _;
  }

  modifier receivedByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ReceivedByRetailer);
    _;
  }

  modifier forSaleByRetailer(uint _upc) {
    require(items[_upc].itemState == State.ForSaleByRetailer);
    _;
  }

  modifier purchasedByConsumer(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByConsumer);
    _;
  }

// constructor setup owner sku upc
  constructor(address CPCtoken) payable {
    // Grant the contract deployer the default admin role: it will be able
    // to grant and revoke any roles
    _CPCcontract = IERC20(CPCtoken);
    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    owner = payable(msg.sender);
    sku = 1;
    upc = 1;
  }

   // Define a function 'addManufacturer' that adds this role
  function addManufacturer(address account) public onlyAdmin() {
    _setupRole(MANUFACTURER_ROLE, account);
  }

   // Define a function 'addDistributor' that adds this role
  function addDistributor(address account) public onlyAdmin() {
    _setupRole(DISTRIBUTOR_ROLE, account);
  }

   // Define a function 'addRetailer' that adds this role
  function addRetailer(address account) public onlyAdmin() {
    _setupRole(RETAILER_ROLE, account);
  }

 // Define a function 'addRetailer' that adds this role
  function addConsumer(address account) public onlyAdmin() {
    _setupRole(CONSUMER_ROLE, account);
  }

 // Define a function 'renounceManufacturer' to renounce this role
  function renounceManufacturer() public onlyManufacturer() {
    renounceRole(MANUFACTURER_ROLE, msg.sender);
  }

  // Define a function 'renounceDistributor' to renounce this role
  function renounceDistributor() public onlyDistributor() {
    renounceRole(DISTRIBUTOR_ROLE, msg.sender);
  }

  // Define a function 'renounceRetailer' to renounce this role
  function renounceRetailer() public onlyRetailer() {
    renounceRole(RETAILER_ROLE, msg.sender);
  }

  // Define a function 'renounceConsumer' to renounce this role
  function renounceConsumer() public onlyConsumer() {
    renounceRole(CONSUMER_ROLE, msg.sender);
  }

    // Define a function 'kill'
  function kill() public {
    if (msg.sender == owner) {
      address payable ownerAddressPayable = _make_payable(owner);
      selfdestruct(ownerAddressPayable);
    }
  }

    // allows you to convert an address into a payable address
function _make_payable(address account_)  internal pure returns(address payable) { 
      return payable(account_);
    }
/*
 1st step in supplychain
 Allows Manufacturer to create part
*/
  function produceItemByManufacturer(uint _upc,string memory _productType, string memory _productNotes, uint _price) public
    onlyManufacturer() // check address belongs to ManufacturerRole
    {

    address distributorID; // Empty distributorID address
    address retailerID; // Empty retailerID address
    address consumerID; // Empty consumerID address
    Item memory newProduce; // Create a new struct Item in memory
    newProduce.sku = sku;  // Stock Keeping Unit (SKU)
    newProduce.upc = _upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the Consumer
    newProduce.ownerID = msg.sender;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    newProduce.originManufacturerID = msg.sender; // Metamask-Ethereum address of the Manufacturer
    newProduce.productType = _productType;  // Product ID
    newProduce.productNotes = _productNotes; // Product Notes
    newProduce.productPrice = _price;  // Product Price
    newProduce.productDate = block.timestamp;
    newProduce.productID = concatenateInfoAndHash(newProduce.ownerID, newProduce.upc + newProduce.sku, newProduce.productType, newProduce.productDate);  // Product Hash ID
    newProduce.itemState = defaultState; // Product State as represented in the enum above
    newProduce.distributorID = distributorID; // Metamask-Ethereum address of the Distributor
    newProduce.retailerID = retailerID; // Metamask-Ethereum address of the Retailer
    newProduce.consumerID = consumerID; // Metamask-Ethereum address of the Consumer // ADDED payable
    items[_upc] = newProduce; // Add newProduce to items struct by upc
    uint placeholder; // Block number place holder
    Txblocks memory txBlock; // create new txBlock struct
    txBlock.FTD = placeholder; // assign placeholder values
    txBlock.DTR = placeholder;
    txBlock.RTC = placeholder;
    itemsHistory[_upc] = txBlock; // add txBlock to itemsHistory mapping by upc

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit ProduceByManufacturer(_upc,msg.sender);

  }

/*
2nd step in supplychain
Allows Manufacturer to sell part
*/
  function sellItemByManufacturer(uint _upc, uint _price) public
    onlyManufacturer() // check address belongs to ManufacturerRole
    producedByManufacturer(_upc) // check items state has been produced
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
      items[_upc].itemState = State.ForSaleByManufacturer;
      items[_upc].productPrice = _price;
      emit ForSaleByManufacturer(_upc,msg.sender);
  }

/*
3rd step in supplychain
Allows distributor to purchase part
*/
  function purchaseItemByDistributor(uint _upc) public payable
    onlyDistributor() // check msg.sender belongs to distributorRole
    forSaleByManufacturer(_upc) // check items state is for ForSaleByManufacturer
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].originManufacturerID); // make originFarmID payable
    uint256 allowance = _CPCcontract.allowance(msg.sender, address(this));
    require(allowance >= items[_upc].productPrice, "Check the token allowance");
    _CPCcontract.transferFrom(msg.sender,ownerAddressPayable,items[_upc].productPrice); // transfer funds from distributor to Manufacturer
    items[_upc].ownerID = msg.sender; // update owner
    items[_upc].distributorID = msg.sender; // update distributor
    items[_upc].itemState = State.PurchasedByDistributor; // update state
    itemsHistory[_upc].FTD = block.number; // add block number
    emit PurchasedByDistributor(_upc,msg.sender);

  }

  /*
  4th step in supplychain
  Allows Manufacturer to ship part purchased by distributor
  */
  function shippedItemByManufacturer(uint _upc) public payable
    onlyManufacturer() // check msg.sender belongs to ManufacturerRole
    purchasedByDistributor(_upc)
    verifyCaller(items[_upc].originManufacturerID) // check msg.sender is originManufacturerID
    {
    items[_upc].itemState = State.ShippedByManufacturer; // update state
    emit ShippedByManufacturer(_upc,msg.sender);
  }

  /*
  5th step in supplychain
  Allows distributor to receive part
  */
  function receivedItemByDistributor(uint _upc) public
    onlyDistributor() // check msg.sender belongs to DistributorRole
    shippedByManufacturer(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.ReceivedByDistributor; // update state
    emit ReceivedByDistributor(_upc,msg.sender);
  }

  /*
  6th step in supplychain
  Allows distributor to process part
  */
  function processedItemByDistributor(uint _upc) public
    onlyDistributor() // check msg.sender belongs to DistributorRole
    receivedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.ProcessedByDistributor; // update state
    emit ProcessedByDistributor(_upc,msg.sender);
  }

  /*
  7th step in supplychain
  Allows distributor to package part
  */
  function packageItemByDistributor(uint _upc) public
    onlyDistributor() // check msg.sender belongs to DistributorRole
    processByDistributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
    items[_upc].itemState = State.PackageByDistributor;
    emit PackagedByDistributor(_upc,msg.sender);
  }

  /*
  8th step in supplychain
  Allows distributor to sell part
  */
  function sellItemByDistributor(uint _upc, uint _price) public
    onlyDistributor() // check msg.sender belongs to DistributorRole
    packagedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is owner
    {
        items[_upc].itemState = State.ForSaleByDistributor;
        items[_upc].productPrice = _price;
        emit ForSaleByDistributor(_upc,msg.sender);
  }

  /*
  9th step in supplychain
  Allows retailer to purchase part
  */
  function purchaseItemByRetailer(uint _upc) public payable
    onlyRetailer() // check msg.sender belongs to RetailerRole
    forSaleByDistributor(_upc)
    {
    address payable ownerAddressPayable = _make_payable(items[_upc].distributorID);
    uint256 allowance = _CPCcontract.allowance(msg.sender, address(this));
    require(allowance >= items[_upc].productPrice, "Check the token allowance");
    _CPCcontract.transferFrom(msg.sender,ownerAddressPayable,items[_upc].productPrice);
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.PurchasedByRetailer;
    itemsHistory[_upc].DTR = block.number;
    emit PurchasedByRetailer(_upc,msg.sender);
  }

  /*
  10th step in supplychain
  Allows Distributor to
  */
  function shippedItemByDistributor(uint _upc) public
    onlyDistributor() // check msg.sender belongs to DistributorRole
    purchasedByRetailer(_upc)
    verifyCaller(items[_upc].distributorID) // check msg.sender is distributorID
    {
      items[_upc].itemState = State.ShippedByDistributor;
      emit ShippedByDistributor(_upc,msg.sender);
  }

  /*
  11th step in supplychain
  */
  function receivedItemByRetailer(uint _upc) public
    onlyRetailer() // check msg.sender belongs to RetailerRole
    shippedByDistributor(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is ownerID
    {
      items[_upc].itemState = State.ReceivedByRetailer;
      emit ReceivedByRetailer(_upc,msg.sender);
  }

  /*
  12th step in supplychain
  */
  function sellItemByRetailer(uint _upc, uint _price) public
    onlyRetailer()  // check msg.sender belongs to RetailerRole
    receivedByRetailer(_upc)
    verifyCaller(items[_upc].ownerID) // check msg.sender is ownerID
    {
      items[_upc].itemState = State.ForSaleByRetailer;
      items[_upc].productPrice = _price;
      emit ForSaleByRetailer(_upc,msg.sender);
  }

  /*
  13th step in supplychain
  */
  function purchaseItemByConsumer(uint _upc) public payable
    onlyConsumer()  // check msg.sender belongs to ConsumerRole
    forSaleByRetailer(_upc)
    {
      items[_upc].consumerID = msg.sender;
      address payable ownerAddressPayable = _make_payable(items[_upc].retailerID);
     uint256 allowance = _CPCcontract.allowance(msg.sender, address(this));
      require(allowance >= items[_upc].productPrice, "Check the token allowance");
      _CPCcontract.transferFrom(msg.sender,ownerAddressPayable,items[_upc].productPrice);
      items[_upc].ownerID = msg.sender;
      items[_upc].consumerID = msg.sender;
      items[_upc].itemState = State.PurchasedByConsumer;
      itemsHistory[_upc].RTC = block.number;
    emit PurchasedByConsumer(_upc,msg.sender);
  }

  // Define a function 'fetchItem' that fetches the data
  function fetchItem(uint _upc) public view returns
    (
    uint    itemSKU,
    uint    itemUPC,
    bytes32 productID,
    string  memory productType,
    uint    productPrice,
    uint256 productDate,
    State   itemState,
    address ownerID,               
    address originManufacturerID,  
    address distributorID,
    address retailerID,
    address consumerID
    )
    {
      // Assign values to the 9 parameters
    Item memory item = items[_upc];

    return
    (
      item.sku,
      item.upc,
      item.productID,
      item.productType,
      item.productPrice,
      item.productDate,
      item.itemState,
      item.ownerID,               
      item.originManufacturerID,  
      item.distributorID,
      item.retailerID,
      item.consumerID
    );

  }

  // Define a function 'fetchItemHistory' that fetaches the data
  function fetchitemHistory(uint _upc) public view returns
    (
      uint blockManufacturerToDistributor,
      uint blockDistributorToRetailer,
      uint blockRetailerToConsumer
    )
    {
      // Assign value to the parameters
      Txblocks memory txblock = itemsHistory[_upc];
      return
      (
        txblock.FTD,
        txblock.DTR,
        txblock.RTC
      );

    }
    // Define a function concatenateInfoAndHash 
    function concatenateInfoAndHash(address a1, uint _upc, string memory _productType, uint256 _productDate) private pure returns (bytes32){
        //First, get all values as bytes
        bytes20 b_a1 = bytes20(a1);
        string memory s1 = Strings.toString(_upc);
        string memory s3 = Strings.toString(_productDate);
        bytes memory b_s1 = bytes(s1);
        bytes memory b_s2 = bytes(_productType);
        bytes memory b_s3 = bytes(s3);

        //Then calculate and reserve a space for the full string
        string memory s_full = new string(b_a1.length + b_s1.length + b_s2.length + b_s3.length);
        bytes memory b_full = bytes(s_full);
        uint j = 0;
        uint i;
        for(i = 0; i < b_a1.length; i++){
            b_full[j++] = b_a1[i];
        }
        for(i = 0; i < b_s1.length; i++){
            b_full[j++] = b_s1[i];
        }
        for(i = 0; i < b_s2.length; i++){
            b_full[j++] = b_s2[i];
        }
        for(i = 0; i < b_s3.length; i++){
            b_full[j++] = b_s3[i];
        }

        //Hash the result and return
        return keccak256(b_full);
    }

  }
